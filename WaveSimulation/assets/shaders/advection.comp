#version 460 core

#extension GL_ARB_shading_language_include : require
#include "compute_macros.glsl"
#include "compute_common.glsl"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 4) in;

uniform sampler3D samp[4];
uniform sampler3D in_Grid;
layout(r32f) uniform writeonly image3D out_Grid;

// Group speed of current wave number
uniform float u_groupSpeed;
// Time step
uniform float u_dt;

vec3 reflection(vec3 realPosition)
{
//	realPosition = vec3(((realPosition.xy - cubepos) * 1.01) + cubepos, realPosition[Theta]);
	if (!insideCube(realPosition.xy))
		return realPosition;

	vec2 pos = realPosition.xy;
	vec2 posc = realPosition.xy - cubepos;
	vec2 n;
	if (abs(posc.x) > abs(posc.y))
		n = sign(posc.x) * vec2(1, 0);
	else
		n = sign(posc.y) * vec2(0, 1);
	n *= 2;

	float rtheta = realPosition[Theta];
	vec2 kdir = vec2(cos(rtheta), sin(rtheta));

	pos = pos - 2.0 * (-1) * n;
	kdir = kdir - 2.0 * (kdir * n) * n;

	float reftheta = atan(kdir.y, kdir.x);
	return vec3(realPosition.xy, reftheta);
}

void main()
{
	ivec3 pos = ivec3(gl_GlobalInvocationID);
	vec3 realPosition = realPos(pos[X], pos[Z], pos[Theta]);

	float result;
	vec2 waveVector = vec2(cos(realPosition[Theta]), sin(realPosition[Theta]));

	realPosition = realPosition - u_dt * u_groupSpeed * vec3(waveVector, 0.0);
	realPosition = reflection(realPosition);
	vec3 gridPosition = gridPos(realPosition);

	if (gridPosition[X] <= 0.0 || gridPosition[X]+1 >= u_dim[X] || gridPosition[Z] <= 0.0 || gridPosition[Z]+1 >= u_dim[Z])
	{
		result = defaultAmplitude(realPosition[Theta]);
	}
	else
	{
		vec3 texPos =  gridPosition/(u_dim.xyz) + 0.5/u_dim.xyz;
		result = texture(in_Grid, texPos).r;
	}

	imageStore(out_Grid, pos, vec4(result, 0, 0, 0));
}
