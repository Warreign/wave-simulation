/**
 * @file profile.comp
 *
 * @brief Profile buffer compute shader
 *
 * @author Viktor Shubert
 * Contact: shubevik@fel.cvut.cz
 *
 */

#version 460 core

#extension GL_ARB_shading_language_include : require
#include "compute_macros.glsl"

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
layout(rgba32f) writeonly uniform image1DArray out_ProfileBuffer;

// Current discrete k
uniform int u_ik;
uniform float u_windSpeed;
// Lower Bound
uniform float u_kmin;
// Upper bound
uniform float u_kmax;
// Time since start
uniform float u_time;
// Profile buff. period
uniform float u_period;
// Profile buff. resolution
uniform uint u_resolution;
// Spectrum index
uniform int u_specIdx;


float dispersionRelation(float k)
{
    return sqrt(9.81 * k);
};


float phillips(float k)
{
	float c1 = -1.4969804057656668;
	float c2 = 0.000641623890917771;
	float C = 10;
	float A = C * c2 * pow(1.1, 1.5 * log2(k));
	float B = exp(c1 * pow(k, 2) / pow(u_windSpeed, 4));
	return sqrt(A * B);
}

float tessendorf(float k)
{
	float c = -2.437688890280596;
	float c2 = 0.000641623890917771;
	float g = 9.81;
	float A = c2 * pow(1.1, 1.5 * log2(k));
	float B = exp(c * pow(k, 2) / pow(u_windSpeed, 4));
	return sqrt(A * B);
}

float john(float k)
{
	float g = 9.81;
	float alpha = 0.0081;
	float beta = -0.74;
	float omega0 = g / (1.026 * u_windSpeed);
	float omegap = 0.855 * g / u_windSpeed;
	float omega = 0.345 * dispersionRelation(TAU / k);
	float sigma;
	if (omega <= omegap)
		sigma = 0.7;
	else
		sigma = 0.9;
	float r = exp(-pow(omega - omegap, 2) / 2 * pow(sigma * omegap, 2));
	return 0.04 * (alpha * g * g / pow(omega, 5) ) * exp(-beta * pow(omega0 / omega, 4)) * pow(0.33, r);
}

float john2(float k)
{
	float scmp = 1.0683429396525794;
	float sigma = u_windSpeed * pow(k, -0.5) <= scmp ? 0.7 : 0.9;
	float rc1 = 0.059558;
	float rc2 = 0.1490847301860154;
	float r = exp(rc1 * pow(u_windSpeed, -3) * (rc2 * u_windSpeed * pow(k, -0.5) -1) * sigma * sigma );
	float gamma = 3.3;

	float c1 = 0.000026133696567246258;
	float c2 = -1.6283687151896558;

//	float A = c1 * 10000 * pow(k, 1.5);
	float A = c1 * pow(1.1, 2.5 * k);
	float B = exp(c2 * pow(k,2) / pow(u_windSpeed, 4));

	return 0.02 * sqrt(A * B) * pow(gamma, r*5);
}

float pierson(float k)
{
	float g = 9.81;
	float alpha = 0.0081;
	float beta = -0.74;
	float omega0 = g / (1.026 * u_windSpeed);
	float omegap = 0.855 * g / u_windSpeed;
	float omega = min(dispersionRelation(TAU * k), omegap);
	return 0.04 * (alpha * g * g / pow(omega, 5) ) * exp(-beta * pow(omega0 / omega, 4));
}

float pierson2(float k)
{
	float g = 9.81;
	float A = 0.005225637 * pow(1.1, 2.5 * log(k));
	float B = exp(-1.62787 * pow(k, 2) / pow(u_windSpeed, 4));
	return sqrt(A * B);
}


float spectrum(float k)
{
	switch (u_specIdx)
	{
		case 1:
		return john2(k);
		case 2:
		return tessendorf(k);
		case 3:
		return phillips(k);
		case 4:
		return pierson(k);
		default:
		return pierson2(k);
	}
}

// Gerstner waves
vec4 calculateDisplacement(float phase, float k)
{
    float s = sin(phase);
    float c = cos(phase);
    return vec4(-s, c, - k * c, - k * s );
};


// Function to integrate
vec4 compute(float k, float p, float c)
{
	float knum = TAU / k; //angular wave number
	float phase1 = knum * p - dispersionRelation(knum) * u_time;
	float phase2 = knum * (p + u_period) - dispersionRelation(knum) * u_time;

	return k * spectrum(k) * mix(calculateDisplacement(phase2, knum), calculateDisplacement(phase1, knum), c);
}

void main()
{
	int pos = int(gl_GlobalInvocationID.x);
	
	float p = (float(pos * u_period) / u_resolution) + u_kmin;
	float c = p / u_period;

	float dx = (u_kmax - u_kmin) / INTEGRATION_SAMPLES;
	float x = u_kmin + 0.5 * dx;
	vec4 result = dx * compute(x, p, c);
	for (int i = 1; i < INTEGRATION_SAMPLES; ++i)
	{
		x += dx;
		result += dx * compute(x, p, c);
	}
	imageStore(out_ProfileBuffer, ivec2(pos, u_ik), result);
}