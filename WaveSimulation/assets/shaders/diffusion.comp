#version 460 core

#extension GL_ARB_shading_language_include : require
#include "compute_macros.glsl"
#include "compute_common.glsl"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 4) in;

layout(r32f) uniform readonly image3D in_Grid;
layout(r32f) uniform readonly image3D in_Amps[N_K];
layout(r32f) uniform writeonly image3D out_Grid;


// Group speed of current wave number
uniform float u_groupSpeed;
// Time step
uniform float u_dt;
uniform int u_ik;


float value(int ix, int iz, int itheta, int ik)
{
    itheta = (itheta + u_dim[Theta]) % u_dim[Theta];

    if (ik < 0 || ik >= N_K)
    {
        return 0.0;
    }

    if (ix < 0 || ix >= u_dim[X] || iz < 0 || iz >= u_dim[Z])
        return defaultAmplitude(itheta);

    vec4 val = imageLoad(in_Amps[ik], ivec3(ix, iz, itheta));
    return val.r;
}

float value(int ix, int iz, int itheta)
{
    itheta = (itheta + u_dim[Theta]) % u_dim[Theta];

    if (ix < 0 || ix >= u_dim[X] || iz < 0 || iz >= u_dim[Z])
        return defaultAmplitude(itheta);

    vec4 val = imageLoad(in_Amps[u_ik], ivec3(ix, iz, itheta));
    return val.r;
}

void main()
{
	ivec3 pos = ivec3(gl_GlobalInvocationID);

    float gamma = 0.05 * u_groupSpeed * u_dt  * u_delta[Theta] * u_delta[Theta] / u_delta[X];

    float delta = 0.00002 * u_dt * u_delta[K] * u_delta[K] * u_delta[X] * u_delta[X] * u_groupSpeed;

    float result = (1.0 - gamma) * value(pos[X], pos[Z], pos[Theta]) + gamma * 0.5 * (value(pos[X], pos[Z], pos[Theta]+1) + value(pos[X], pos[Z], pos[Theta]-1)) ;

    result -= delta * (value(pos[X], pos[Z], pos[Theta], u_ik) + 0.5 * (value(pos[X], pos[Z], pos[Theta], u_ik + 1) + value(pos[X], pos[Z], pos[Theta], u_ik -1)));

//    result = value(pos[X], pos[Z], pos[Theta]);
	imageStore(out_Grid, pos, vec4(result, 0, 0, 0));
}
