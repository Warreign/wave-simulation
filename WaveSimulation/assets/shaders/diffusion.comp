#version 460 core

#define PI 3.1415926538
#define TAU 6.282003266

#define X 0
#define Z 1
#define Theta 2

layout (local_size_x = 16, local_size_y = 16, local_size_z = 4) in;

layout(r32f) uniform readonly image3D in_Grid;
layout(r32f) uniform writeonly image3D out_Grid;

uniform int u_direction;
uniform float u_defAmplitude;

// Grid Dimensions
uniform ivec3 u_dim;
// Minimum values on the real grid
uniform vec3 u_min;
// Difference between discreet values of the grid
uniform vec3 u_delta;

// Group speed of current wave number
uniform float u_groupSpeed;
// Time step
uniform float u_dt;

float defaultAmplitude(int itheta)
{
    if (itheta == u_direction)
        return u_defAmplitude;
    return 0.0;
}

float value(int ix, int iz, int itheta)
{
    itheta = (itheta + u_dim[Theta]) % u_dim[Theta];

    if (ix < 0 || ix >= u_dim[X] || iz < 0 || iz >= u_dim[Z])
        return defaultAmplitude(itheta);

    vec4 val = imageLoad(in_Grid, ivec3(ix, iz, itheta));
    return val.r;
}

void main()
{
	ivec3 pos = ivec3(gl_GlobalInvocationID);

    float gamma = 2 * 0.025 * u_groupSpeed * u_dt / u_delta[X];

    float result = (1.0 - gamma) * value(pos[X], pos[Z], pos[Theta]) + gamma * 0.5 * (value(pos[X], pos[Z], pos[Theta]+1) + value(pos[X], pos[Z], pos[Theta]-1)) ;

//    result = value(pos[X], pos[Z], pos[Theta]);
	imageStore(out_Grid, pos, vec4(result, 0, 0, 0));
}
